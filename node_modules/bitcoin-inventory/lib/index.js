'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events');
var INV = require('bitcoin-protocol').constants.inventory;
var MapDeque = require('map-deque');
var old = require('old');
var reverse = require('buffer-reverse');

// TODO: prevent DoS (e.g. rate limiting, cap on stored data)
// TODO: add optional tx verification (user-provided function), and broadcast valid txs

var Inventory = function (_EventEmitter) {
  _inherits(Inventory, _EventEmitter);

  function Inventory(peers) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, Inventory);

    if (!peers) {
      throw new Error('Must provide "peers" argument');
    }

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Inventory).call(this));

    var ttl = opts.ttl != null ? opts.ttl : 2 * 60 * 1000;
    _this.peers = peers;
    _this.data = new MapDeque();
    _this.requesting = {};

    _this.peers.on('inv', _this._onInv.bind(_this));
    _this.peers.on('tx', _this._onTx.bind(_this));
    _this.peers.on('getdata', _this._onGetdata.bind(_this));

    _this.lastCount = 0;
    _this.interval = setInterval(_this._removeOld.bind(_this), ttl);
    if (_this.interval.unref) _this.interval.unref();
    return _this;
  }

  _createClass(Inventory, [{
    key: '_onInv',
    value: function _onInv(items) {
      var peer = arguments.length <= 1 || arguments[1] === undefined ? this.peers : arguments[1];

      var getData = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          if (item.type !== INV.MSG_TX) continue;
          var hash = getHash(item.hash);
          if (this.requesting[hash] || this.data.has(hash)) continue;
          getData.push(item);
          this.requesting[hash] = true;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (getData.length > 0) {
        peer.send('getdata', getData);
      }
    }
  }, {
    key: '_onTx',
    value: function _onTx(tx) {
      var peer = arguments.length <= 1 || arguments[1] === undefined ? this.peers : arguments[1];

      var hash = getHash(tx.getHash());
      delete this.requesting[hash];
      if (this.data.has(hash)) return;
      this._add(tx, false);
      this.emit('tx', tx, peer);
      this.emit('tx:' + hash, tx, peer);
    }
  }, {
    key: '_onGetdata',
    value: function _onGetdata(items) {
      var peer = arguments.length <= 1 || arguments[1] === undefined ? this.peers : arguments[1];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = items[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var item = _step2.value;

          if (item.type !== INV.MSG_TX) continue;
          var hash = getHash(item.hash);
          if (!this.data.has(hash)) continue;
          var entry = this.data.get(hash);
          if (!entry.broadcast) continue;
          peer.send('tx', this.data.get(hash).tx);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: '_removeOld',
    value: function _removeOld() {
      for (var i = 0; i < this.lastCount; i++) {
        this.data.shift();
      }
      this.lastCount = this.data.length;
    }
  }, {
    key: '_add',
    value: function _add(tx, broadcast) {
      var hashBuf = tx.getHash();
      var hash = getHash(hashBuf);
      if (!this.data.has(hash)) {
        this.data.push(hash, { tx: tx, broadcast: broadcast });
      } else {
        this.data.get(hash).broadcast = true;
      }
    }
  }, {
    key: 'broadcast',
    value: function broadcast(tx) {
      this._add(tx, true);
      this._sendInv(tx, this.peers);
    }
  }, {
    key: '_sendInv',
    value: function _sendInv(tx, peer) {
      peer.send('inv', [{ hash: tx.getHash(), type: INV.MSG_TX }]);
    }
  }, {
    key: 'get',
    value: function get(hash) {
      var entry = this.data.get(getHash(hash));
      if (entry) return entry.tx;
    }
  }, {
    key: 'close',
    value: function close() {
      clearInterval(this.interval);
      // TODO: stop listening to peers
    }
  }]);

  return Inventory;
}(EventEmitter);

function getHash(hash) {
  return reverse(hash).toString('hex');
}

module.exports = old(Inventory);