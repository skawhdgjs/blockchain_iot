#!/usr/bin/env node

var crypto = require("crypto");
var secp256k1 = require("./");
var EC = require("elliptic").ec;

var ec = new EC("secp256k1");
var privateKey = new Buffer(32);
privateKey.fill(1);
var publicKey = secp256k1.createPublicKey(privateKey);

function signWithSecp256k1(msg) {
  return secp256k1.sign(privateKey, msg);
}

function verifyWithSecp256k1(msg, sig) {
  return secp256k1.verify(publicKey, msg, sig) === 1;
}

function signWithElliptic(msg) {
  return new Buffer(ec.sign(msg, privateKey).toDER());
}

function verifyWithElliptic(msg, sig) {
  return ec.verify(msg, sig, publicKey);
}

function start() {
  var msg = process.argv[2];
  if (!msg) {
    console.log("No message provided");
    process.exit(1);
  }
  msg = crypto.createHash("sha256").update(msg).digest();
  console.log("Message:", msg.toString("hex"));

  var sigFromSecp256k1 = signWithSecp256k1(msg);
  var hsigFromSecp256k1 = sigFromSecp256k1.toString("hex");
  var sigFromElliptic = signWithElliptic(msg);
  var hsigFromElliptic = sigFromElliptic.toString("hex");

  console.log("Signature from secp256k1:", hsigFromSecp256k1);
  console.log("Signature from elliptic:", hsigFromElliptic);
  console.log(
    "\nSignatures are",
    hsigFromSecp256k1 === hsigFromElliptic ? "equal" : "NON equal");

  var verified = (
      verifyWithSecp256k1(msg, sigFromSecp256k1) &&
      verifyWithSecp256k1(msg, sigFromElliptic) &&
      verifyWithElliptic(msg, sigFromSecp256k1) &&
      verifyWithElliptic(msg, sigFromElliptic));
  console.log("Verify is", verified ? "ok" : "NOT ok");
}

start();
