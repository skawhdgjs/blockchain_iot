'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyPair = keyPair;
exports.fromSecretKey = fromSecretKey;
exports.encrypt = encrypt;
exports.decrypt = decrypt;
exports.sign = sign;
exports.verify = verify;

var _tweetnacl = require('tweetnacl');

var _tweetnacl2 = _interopRequireDefault(_tweetnacl);

var _tweetnaclUtil = require('tweetnacl-util');

var _tweetnaclUtil2 = _interopRequireDefault(_tweetnaclUtil);

var _ed2curve = require('ed2curve');

var _ed2curve2 = _interopRequireDefault(_ed2curve);

var _fastMemoize = require('fast-memoize');

var _fastMemoize2 = _interopRequireDefault(_fastMemoize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var convert = {
  publicKey: (0, _fastMemoize2.default)(_ed2curve2.default.convertPublicKey),
  secretKey: (0, _fastMemoize2.default)(_ed2curve2.default.convertSecretKey)
};

function keyPair() {
  var keyPair = _tweetnacl2.default.sign.keyPair();

  return {
    secretKey: _tweetnaclUtil2.default.encodeBase64(keyPair.secretKey),
    publicKey: _tweetnaclUtil2.default.encodeBase64(keyPair.publicKey)
  };
}

function fromSecretKey(secretKey) {
  secretKey = _tweetnaclUtil2.default.decodeBase64(secretKey);

  var keyPair = _tweetnacl2.default.sign.keyPair.fromSecretKey(secretKey);

  return {
    secretKey: _tweetnaclUtil2.default.encodeBase64(keyPair.secretKey),
    publicKey: _tweetnaclUtil2.default.encodeBase64(keyPair.publicKey)
  };
}

function encrypt(data, theirPublicKey, mySecretKey) {
  data = _tweetnaclUtil2.default.decodeUTF8(data);
  theirPublicKey = convert.publicKey(_tweetnaclUtil2.default.decodeBase64(theirPublicKey));
  mySecretKey = convert.secretKey(_tweetnaclUtil2.default.decodeBase64(mySecretKey));

  var nonce = _tweetnacl2.default.randomBytes(_tweetnacl2.default.box.nonceLength);

  data = _tweetnacl2.default.box(data, nonce, theirPublicKey, mySecretKey);

  return {
    data: _tweetnaclUtil2.default.encodeBase64(data),
    nonce: _tweetnaclUtil2.default.encodeBase64(nonce)
  };
}

function decrypt(data, nonce, theirPublicKey, mySecretKey) {
  data = _tweetnaclUtil2.default.decodeBase64(data);
  nonce = _tweetnaclUtil2.default.decodeBase64(nonce);
  theirPublicKey = convert.publicKey(_tweetnaclUtil2.default.decodeBase64(theirPublicKey));
  mySecretKey = convert.secretKey(_tweetnaclUtil2.default.decodeBase64(mySecretKey));

  data = _tweetnacl2.default.box.open(data, nonce, theirPublicKey, mySecretKey);

  if (!data) {
    throw new Error('failed opening nacl.box');
  }

  return _tweetnaclUtil2.default.encodeUTF8(data);
}

function sign(data, mySecretKey) {
  data = _tweetnaclUtil2.default.decodeUTF8(data);
  mySecretKey = _tweetnaclUtil2.default.decodeBase64(mySecretKey);

  data = _tweetnacl2.default.sign.detached(data, mySecretKey);

  return _tweetnaclUtil2.default.encodeBase64(data);
}

function verify(data, signature, theirPublicKey) {
  data = _tweetnaclUtil2.default.decodeUTF8(data);
  signature = _tweetnaclUtil2.default.decodeBase64(signature);
  theirPublicKey = _tweetnaclUtil2.default.decodeBase64(theirPublicKey);

  return _tweetnacl2.default.sign.detached.verify(data, signature, theirPublicKey);
}